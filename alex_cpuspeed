#!/usr/bin/env python3

#################### ALESSANDRO RIDOLFI ########################
#                        Version 1.1                           #
#                Cagliari, Sep 2017 - Aug 2023                 #
################################################################


import sys, os, os.path, time, subprocess, datetime
import numpy as np

def get_command_output(command):
        list_for_Popen = command.split()
        proc = subprocess.Popen(list_for_Popen, stdout=subprocess.PIPE)
        out, err = proc.communicate()
        return out.decode(sys.stdout.encoding)

def get_command_output_with_pipe(command1, command2):
    list_for_Popen_cmd1 = command1.split()
    list_for_Popen_cmd2 = command2.split()
    p1 = subprocess.Popen(list_for_Popen_cmd1, stdout=subprocess.PIPE)
    p2 = subprocess.Popen(list_for_Popen_cmd2, stdin=p1.stdout, stdout=subprocess.PIPE)
    p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.                                                                           
    out, err = p2.communicate()
    return out.decode(sys.stdout.encoding)


string_version="1.1 (25Aug2023)"
flag_GHz = 0
flag_plotfreq = 0
flag_log = 0
log_tag=""
refresh_interval_s = 2.0
ncores = int(get_command_output("nproc"))
array_freqs = np.zeros((ncores,0))
CPU_model = ""

#ARGOMENTI DA SHELL
if (("-h" in sys.argv) or ("-help" in sys.argv) or ("--help" in sys.argv)):
    print("Usage: alex_cpuspeed [-GHz] [-t SECONDS] [-log <tag>] [-plotfreq] ")
    print()
    exit()
elif (("-version" in sys.argv) or ("--version" in sys.argv)):
    print("Version: %s" % (string_version))
    exit()

else:
    for j in range( 1, len(sys.argv)):
        if (sys.argv[j] == "-GHz"):
            flag_GHz = 1
        elif (sys.argv[j] == "-t"):
            refresh_interval_s = np.float64(sys.argv[j+1])
        elif (sys.argv[j] == "-plotfreq"):
            import pylab as plt
            flag_plotfreq = 1
        elif (sys.argv[j] == "-log"):
            flag_log = 1
            log_tag = sys.argv[j+1]
            logfile_name = "LOG-alex_cpuspeed_%s_%s.txt" % (log_tag, (datetime.datetime.now()).strftime("%Y%m%d_%H%M%S") ) 
            logfile = open(logfile_name, "w", 1)
            logfile.write("%20s %20s %20s %20s %20s %20s %20s\n" % ("elapsed_seconds", "date", "time", "CPUtemp(deg)", "GPU(s)temp(deg)", "MaxCPUfreq(MHz)", "AvgCPUfreq(MHz)" ))
list_colors = ["b", "g", "r", "c", "m", "y", 'k']
n = 0
t_s = 0
array_time_s = np.zeros(0)

if "AMD" in get_command_output_with_pipe("lscpu", "grep name"):
        CPU_model = "AMD"
if "Intel" in get_command_output_with_pipe("lscpu", "grep name"):
        CPU_model = "Intel"


if flag_plotfreq == 1:
    fig1 = plt.figure()
    plt.clf()
    plt.ion()
    plt.ylim([1000,3700])
    #plt.plot([0], [0])
    plt.show(block=False)

start_time = time.time()


while 1:
    time.sleep(refresh_interval_s)
    string_date = datetime.datetime.now().strftime("%Y%m%d")
    string_time = datetime.datetime.now().strftime("%H%M%S")
    file_cpuinfo = open("/proc/cpuinfo", 'r')
    dict_cores = {}
    core_count = 0
    current_freqs = np.zeros(shape=(ncores, 1))
    t_s = n*refresh_interval_s
    elapsed_seconds = time.time() - start_time

    array_time_s = np.append(array_time_s, t_s)

    

    for line in file_cpuinfo:
        if line.startswith("processor"):
            core_num = int(line.split(":")[-1])
            core_count = core_count + 1
        elif line.startswith("cpu MHz"):
            core_speed = np.float64(line.split(":")[-1])
            current_freqs[core_num] = core_speed
            dict_cores['%d' % core_num] = core_speed

    array_freqs = np.append(array_freqs, current_freqs, axis=1)


    try:
        N_cpus = int(get_command_output_with_pipe("lscpu", "grep Socket").split(":")[-1].strip())
        cputemp_list = []
        output_sensors = get_command_output("sensors").strip()
        
        if CPU_model == "AMD":
                cputemp = np.float64( output_sensors.split("\n")[-1].split()[1].replace("+","").replace("°C",""))
                cputemp_list.append(cputemp)
                CPU_temp_string = "CPU0 temp: +%d °C" % (cputemp_list[0])
                
        elif CPU_model == "Intel":
                list_output_sensors_grep_Package = get_command_output_with_pipe("sensors", "grep Package").split("\n")
                cputemp_list = []
                for j in range(N_cpus):
                        cputemp_list.append(np.float64(list_output_sensors_grep_Package[j].split("+")[1].strip()[:4]))

                CPU_temp_string = "CPU0 temp: +%d °C" % (cputemp_list[0])

                for j in range(1, N_cpus):
                        CPU_temp_string = "%s | CPU%d temp: +%d °C" % (CPU_temp_string, j, cputemp_list[j])
    except:
        CPU_temp_string = "WARNING: cannot read CPU temperature"


        

    try:
        gputemp_list = [np.float64(x) for x in get_command_output("nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader").strip().split("\n")]
        print(gputemp_list)
        N_gpus = len(gputemp_list)
        GPU_temp_string = "GPU0 temp: +%d °C" % (gputemp_list[0])
        print(GPU_temp_string)
        for i in range(1, N_gpus):
                GPU_temp_string = "%s | GPU%d temp: +%d °C" % (GPU_temp_string, i, gputemp_list[i])
    except:
        GPU_temp_string = "WARNING: cannot read GPU temperature"
        N_gpus = 0
    n = n + 1


    os.system("clear")
    print("%s  |  %s" % (CPU_temp_string, GPU_temp_string))
    for j in range(core_count):
        if flag_GHz==1:
            print("Core %2d: %7.2f GHz" % (j, np.float64(dict_cores[str(j)])/1000.))
        else:
            print("Core %2d: %7.0f MHz" % (j, dict_cores[str(j)]))


    str_max_frequency_MHz = "%7.0f" % np.amax(current_freqs)
    str_avg_frequency_MHz = "%7.0f" % np.mean(current_freqs)
    if flag_log == 1:
            string_GPU_temps = ""
            string_CPU_temps = ""
            for i in range(0, N_gpus):
                    string_GPU_temps = "%s %20.0f" % (string_GPU_temps, gputemp_list[i])
            for i in range(0, N_cpus):
                    string_CPU_temps = "%s %20.0f" % (string_CPU_temps, cputemp_list[i])
                    
            logfile.write("%20d %20s %20s %20s %s %20s %20s\n" % (elapsed_seconds, string_date, string_time, string_CPU_temps, string_GPU_temps, str_max_frequency_MHz, str_avg_frequency_MHz))


    if flag_plotfreq == 1:


        for k in range(ncores): 
            plt.plot(array_time_s, array_freqs[:][k], "-", color=list_colors[k % 7])
        plt.xlim([0, np.amax(array_time_s)])
        fig1.canvas.draw()
        #plt.show()


 
    
