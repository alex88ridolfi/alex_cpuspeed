#!/usr/bin/env python
# -*- coding: utf-8 -*

#################### ALESSANDRO RIDOLFI ########################
#                        Version 1.2                           #
#                 Bonn, Sep 2017 - Aug 2018                    #
################################################################


import sys, os, os.path, time, subprocess
import numpy as np

def get_command_output(command):
        list_for_Popen = command.split()
        proc = subprocess.Popen(list_for_Popen, stdout=subprocess.PIPE)
        out, err = proc.communicate()
        return out


string_version="1.2 (24Aug2018)"
flag_GHz = 0
flag_plotfreq = 0
refresh_interval_s = 2.0
ncores = int(get_command_output("nproc"))
array_freqs = np.zeros((ncores,0))

#ARGOMENTI DA SHELL
if (("-h" in sys.argv) or ("-help" in sys.argv) or ("--help" in sys.argv)):
    print "Usage: alex_cpuspeed [-GHz] [-t SECONDS]"
    print
    exit()
elif (("-version" in sys.argv) or ("--version" in sys.argv)):
    print "Version: %s" % (string_version)
    exit()

else:
    for j in range( 1, len(sys.argv)):
        if (sys.argv[j] == "-GHz"):
            flag_GHz = 1
        elif (sys.argv[j] == "-t"):
            refresh_interval_s = np.float(sys.argv[j+1])
        elif (sys.argv[j] == "-plotfreq"):
            import pylab as plt
            flag_plotfreq = 1


list_colors = ["b", "g", "r", "c", "m", "y", 'k']
n = 0
t_s = 0
array_time_s = np.zeros(0)

if flag_plotfreq == 1:
    fig1 = plt.figure()
    plt.clf()
    plt.ion()
    plt.ylim([1000,3700])
    #plt.plot([0], [0])
    plt.show(block=False)
while 1:
    time.sleep(refresh_interval_s)
    file_cpuinfo = open("/proc/cpuinfo", 'r')
    dict_cores = {}
    core_count = 0
    current_freqs = np.zeros(shape=(ncores, 1))
    t_s = n*refresh_interval_s
    array_time_s = np.append(array_time_s, t_s)

    for line in file_cpuinfo:
        if line.startswith("processor"):
            core_num = int(line.split(":")[-1])
            core_count = core_count + 1
        elif line.startswith("cpu MHz"):
            core_speed = np.float(line.split(":")[-1])
            current_freqs[core_num] = core_speed
            dict_cores['%d' % core_num] = core_speed

    array_freqs = np.append(array_freqs, current_freqs, axis=1)

    try:
        output_sensors = get_command_output("sensors").strip()
        cputemp = np.float( output_sensors.split("\n")[-1].split()[1].replace("+","").replace("°C",""))
        CPU_temp_string = "CPU temp: +%d °C" % (cputemp)
    except:
        CPU_temp_string = "WARNING: cannot read CPU temperature"

    try:
        gputemp = np.float(get_command_output("nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader"))
        GPU_temp_string = "GPU temp: +%d °C" % (gputemp)
    except:
        GPU_temp_string = "WARNING: cannot read GPU temperature"

    n = n + 1

    os.system("clear")
    print "%s  |  %s" % (CPU_temp_string, GPU_temp_string)
    for j in range(core_count):
        if flag_GHz==1:
            print "Core %2d: %7.2f GHz" % (j, np.float(dict_cores[str(j)])/1000.)
        else:
            print "Core %2d: %7.0f MHz" % (j, dict_cores[str(j)])

    if flag_plotfreq == 1:


        for k in range(ncores): 
            plt.plot(array_time_s, array_freqs[:][k], "-", color=list_colors[k % 7])
        plt.xlim([0, np.amax(array_time_s)])
        fig1.canvas.draw()
        #plt.show()


 
    
